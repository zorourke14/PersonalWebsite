Personal Website Deployment - Complete Technical Documentation
Project Overview
This project deploys a professional personal portfolio website using modern DevOps practices, infrastructure as code, containerization, and automated SSL certificate management. The website is hosted on Oracle Cloud Infrastructure (OCI) with a production-ready architecture featuring HTTPS encryption, reverse proxy configuration, and Docker containerization.

Architecture Diagram
Technology Stack & Justification
Frontend/Application Layer
Next.js/React: Modern React framework providing server-side rendering, static site generation, and optimal performance
Node.js: JavaScript runtime chosen for its ecosystem compatibility and performance
Docker: Containerization ensuring consistent deployment environments and easy scaling
Infrastructure Layer
Oracle Cloud Infrastructure (OCI):
Cost-effective cloud provider with generous free tier
Reliable performance and enterprise-grade infrastructure
Strong Terraform provider support
Competitive pricing for small-scale deployments
Web Server & Security Layer
Nginx:

Industry-standard reverse proxy with exceptional performance
Superior SSL/TLS termination capabilities
Low memory footprint and high concurrency handling
Robust configuration options for security and caching
Battle-tested in production environments worldwide
Let's Encrypt + Certbot:

Free, automated SSL certificate management
Industry-standard certificate authority
Automatic renewal preventing certificate expiration
Widely trusted and supported
Infrastructure as Code (Terraform)
File Structure
Key Infrastructure Components
Compute Instance:

VM.Standard.E2.1.Micro (Always Free tier)
Ubuntu 22.04 LTS operating system
1 OCPU, 1GB RAM - sufficient for containerized application
Networking:

Virtual Cloud Network (VCN) with CIDR 10.0.0.0/16
Public subnet for internet-facing resources
Internet Gateway for external connectivity
Route tables directing traffic appropriately
Security:

Security Lists (OCI's firewall) allowing:
Port 22 (SSH) for administration
Port 80 (HTTP) for Let's Encrypt challenges
Port 443 (HTTPS) for secure web traffic
SSH key-based authentication (no password access)
Why Terraform?

Infrastructure as Code ensures reproducible deployments
Version control for infrastructure changes
State management prevents configuration drift
Declarative syntax makes infrastructure intentions clear
Easy to destroy and recreate environments
Application Architecture
Docker Compose Configuration
The application uses a multi-container setup:

Nginx Configuration Deep Dive
Events Block:

Upstream Configuration:

Uses Docker's internal DNS for service discovery
Enables load balancing if multiple instances added
Provides health checking capabilities
HTTP to HTTPS Redirection:

Forces all traffic through encrypted connections
Maintains URL structure during redirect
Returns proper HTTP 301 status for SEO
HTTPS Server Configuration:

Proxy Headers Explained:

Host: Preserves original domain name for the application
X-Real-IP: Client's actual IP address
X-Forwarded-For: Chain of proxy IPs (for CDN compatibility)
X-Forwarded-Proto: Original protocol (HTTP/HTTPS) for proper redirects
Deployment Pipeline
1. Infrastructure Provisioning
Creates OCI compute instance with networking
Configures security groups and routing
Outputs public IP for DNS configuration
2. Server Initialization
3. SSL Certificate Generation
Validates domain ownership
Generates certificates in live
Sets up automatic renewal via cron
4. Application Deployment
Builds Next.js application container
Starts nginx reverse proxy
Establishes container networking
Security Features
Network Security
Firewall Rules: Only essential ports exposed (22, 80, 443)
SSH Key Authentication: No password-based access
Security Groups: OCI-level traffic filtering
Application Security
HTTPS Everywhere: All traffic encrypted with TLS 1.2/1.3
Container Isolation: Application runs in sandboxed environment
Minimal Attack Surface: Only necessary services running
SSL/TLS Configuration
Modern Protocols: TLS 1.2 and 1.3 only
Strong Ciphers: Let server choose optimal ciphers
Certificate Chain: Full chain validation for trust
Automatic Renewal: Prevents certificate expiration
Monitoring & Logging
Nginx Logging
Detailed error logging for troubleshooting
Access logs for traffic analysis and security monitoring
Docker Logging
System Monitoring
Docker container health checks
Systemd service management
Automatic container restart on failure
Performance Optimizations
Nginx Optimizations
Worker Connections: Optimized for small VPS
Alpine Linux: Minimal container image
Efficient Proxying: Direct upstream connection
Static File Serving: Nginx handles static assets efficiently
Application Optimizations
Production Build: Next.js optimized bundle
Container Layering: Efficient Docker image layers
Resource Limits: Appropriate memory allocation
Maintenance & Operations
Regular Tasks
SSL Certificate Renewal: Automated via certbot cron job
Security Updates: Regular OS and package updates
Log Rotation: Prevent disk space issues
Backup Strategy: Regular snapshots of application data
Troubleshooting Commands
Cost Analysis
OCI Free Tier Resources
1 Micro compute instance (always free)
10GB boot volume
10TB monthly data transfer
Total monthly cost: $0 (within free tier limits)
Additional Costs (if scaling)
Additional compute: ~$10-50/month
Load balancer: ~$10/month
Block storage: ~$0.02/GB/month
Future Enhancements
Scalability Options
Load Balancing: Add OCI Load Balancer for multiple instances
CDN Integration: Oracle Cloud CDN for global performance
Database: Add PostgreSQL or MySQL for dynamic content
Monitoring: Implement Prometheus + Grafana for metrics
Security Enhancements
WAF: Web Application Firewall for attack protection
Rate Limiting: Prevent abuse and DDoS attacks
Security Headers: Additional HTTP security headers
Vulnerability Scanning: Regular security assessments
Conclusion
This architecture provides a robust, secure, and cost-effective foundation for a personal portfolio website. The combination of infrastructure as code, containerization, and modern security practices creates a professional deployment that can scale with future requirements while maintaining operational simplicity.

The use of industry-standard tools (Nginx, Docker, Terraform) ensures long-term maintainability and the ability to leverage community knowledge and best practices. The entire stack is designed for reliability, security, and performance while remaining cost-effective for personal use.